# -*- coding: utf-8 -*-
"""clean_plate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YyqneQz6Cf7tLxJMRVQsnFEglrNjGA07
"""

# In order to run this lab we need to import two packages.
# IBM Watson: which allows access to the Watson Visual Recognition API
# OpenCV: a package that will help us with image processing
! pip install --upgrade ibm-watson opencv-python

"""Plotting images in Jupyter Notebooks
Let's use a function to help us display images from a URL: The function below with the name plt_image grabs the image from the internet provided that you supply the web address of the image.

URL stands for Uniform Resource Locator, which in this case the web address of our image.
"""

#  Plotting images in Jupyter Notebooks
import cv2
import urllib.request
from matplotlib import pyplot as plt
from pylab import rcParams



def plt_image(image_url, size = (10,8)):

    # Downloads an image from a URL, and displays it in the notebook
    urllib.request.urlretrieve(image_url, "image.jpg") # downloads file as "image.jpg"
    image = cv2.imread("image.jpg")
    
    # If image is in color, then correct color coding from BGR to RGB
    if len(image.shape) == 3:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    rcParams['figure.figsize'] = size[0], size[1] #set image display size

    plt.axis("off")
    plt.imshow(image, cmap="Greys_r")
    plt.show()

# Let's grab the image above from the internet and plot it out.
image_url = 'https://github.com/Violet-XiaoWeiHuang/clean_plate_images/blob/main/bread%20irina-babina-Aop_-stOpnM-unsplash.jpg?raw=true'
plt_image(image_url)

# Paste your API key for IBM Watson Visual Recognition below:
my_apikey = 'ilYK6FyCJFzrr3rChWGvkuROIONqScZIVj9hDqXOOkRI'

# Initialize Watson Visual Recognition
# Let's create your own Watson Visual Recognition instance, it will allow you to make calls to the Watson Visual Recognition API.

from ibm_watson import VisualRecognitionV3
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
authenticator = IAMAuthenticator(my_apikey)

visrec = VisualRecognitionV3('2018-03-19', authenticator=authenticator)

#  Identifying Objects in the Image
import json
image_url = 'https://github.com/Violet-XiaoWeiHuang/clean_plate_images/blob/main/broccoli%20louis-hansel-shotsoflouis-h39GHaRssNo-unsplash.jpg?raw=true'


# threshold is set to 0.6, that means only classes that has a confidence score of 0.6 or greater will be shown
classes = visrec.classify(url=image_url,
                          threshold='0.7',
                          classifier_ids='food').get_result()

plt_image(image_url)
print(json.dumps(classes, indent=2))

# Getting Watson Visual Recognition results as a dataframe
# In the code cell below we use a function called getdf_visrec which uses a dataframe that can help us easily sort the classified labels by confidence score in descending order.
from pandas.io.json import json_normalize
food_item = ""

def getdf_visrec(url, apikey = my_apikey):
    global food_item
    json_result = visrec.classify(url=url,
                              threshold='0.7',
                              classifier_ids='food').get_result()
    
    json_classes = json_result['images'][0]['classifiers'][0]['classes']
    
    food_item = json_classes[0]['class']
    print(f'the food_item is {food_item}')

    df = json_normalize(json_classes).sort_values('score', ascending=False).reset_index(drop=True)
    
    return df

image_url = 'https://github.com/Violet-XiaoWeiHuang/clean_plate_images/blob/main/eggs%20hello-i-m-nik-p1RQPfzCM5U-unsplash.jpg?raw=true'

plt_image(image_url)
getdf_visrec(image_url)

# print(f'2nd the food_item is {food_item}')

# Load data about greenhouse gas emissions of diff foods
ghg_dict = {"meatballs": 6.1, "steak": 46.2, "chicken": 5.4, "egg": 3.7, "broccoli": 2.0, "apple": 0.4, "bread": "1.1105 per loaf of bread"}

if food_item in ghg_dict:
  print(f'in the if statement')

  ghg = ghg_dict.get(food_item) #, "data not available"
  print(f'Global production, emissions and emission intensity for {food_item} is {ghg}')

# Load data about greenhouse gas emissions of diff foods
ghg_dict = {"meatballs": 6.1, "steak": 46.2, "chicken": 5.4, "egg": 3.7, "broccoli": 2.0, "apple": 0.4, "bread": "1.1105 per loaf of bread"}

if food_item in ghg_dict:
  ghg = ghg_dict.get(food_item) #, "data not available"
  print(f'Global GHG emission intensity for {food_item} is {ghg}')